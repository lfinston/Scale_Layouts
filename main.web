@q main.web @>
@q Created by Laurence D. Finston (LDF) Sun 17 Jul 2022 10:32:18 PM CEST @>

@q * (1) Copyright and License.@>

@q Copyright 2022 Laurence D. Finston @>


@q This file is part of Scale_Layouts, a package for generating scale layouts. @>

@q Scale_Layouts is free software; you can redistribute it and/or modify @>
@q it under the terms of the GNU General Public License as published by @>
@q the Free Software Foundation; either version 3 of the License, or @>
@q (at your option) any later version.  @>

@q Scale_Layouts is distributed in the hope that it will be useful, @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the @>
@q GNU General Public License for more details.  @>

@q You should have received a copy of the GNU General Public License @>
@q along with GNU 3DLDF; if not, write to the Free Software @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA@>

@q ("@@" stands for a single at-sign in the following paragraph.) @>

@q Please send bug reports to Laurence.Finston@@gmx.de@>

@q The author can be contacted at: @>

@q Laurence D. Finston                 @>
@q Laurence.Finston@@gmx.de (@@ stands for a single "at" sign.)@>


@q * (1) @>
@
@<Include files@>=
#include <unistd.h>
#include <getopt.h>
#include <stdlib.h>
#include <cstdio>
#include <float.h>
#include <iomanip>
#include <ios>
#include <iostream>
#include <iterator>
#include <math.h>
#include <new>
#include <sstream>
#include <vector>
#include <string>
#include <limits.h>
#include <limits>
#include <cfloat>

#include <mysql.h>

#include "pythagorean.hxx"
#include "equal_temperament.hxx"
#include "werckmeister3.hxx"

using namespace std;


@q * (1) @>
@
@<Global variables@>=
MYSQL_RES *result = 0;
MYSQL_ROW curr_row = 0;
MYSQL *mysql;
  
unsigned int row_ctr = 0; 
unsigned int field_ctr = 0;
long affected_rows = 0;

bool do_pythagorean = false;
bool do_equal_temperament = false;
bool do_werckmeister3 = false;

@q * (1) @>
@
@<|main| definition@>=
int
main(int argc, char *argv[])
{
   bool DEBUG = true; /* |false|  */


   printf("Entering `main'.\n");

   mysql = mysql_init(0);

   if (mysql != 0)
     {
       if (DEBUG) 
	 cerr << "mysql_init succeeded." << endl;
     }
   else
     {
       cerr << "ERROR!  In `main': `mysql_init failed'." << endl
	    << "Exiting `songlist' unsuccessfully with exit status 1."
	    << endl;

       exit(1);
     }

   unsigned int mysql_timeout = 120;
  
   // mysql_options(mysql, MYSQL_OPT_RECONNECT, 0);

   mysql_options(mysql, MYSQL_OPT_CONNECT_TIMEOUT, &mysql_timeout); 
  
   if (!mysql_real_connect(mysql,"localhost","songlist",0,"Songs",0,NULL,0))
   {
      fprintf(stderr, "Failed to connect to database: Error: %s\n",
              mysql_error(mysql));
   }


   cerr << "argc == " << argc << endl;

   for (int i = 0; i < argc; ++i)
   { 
      cerr << "argv[" << i << "] == " << argv[i] << endl;
   }

   @<GCC command line option processing@>@;

   cerr << "do_pythagorean == " << do_pythagorean << endl
        << "do_equal_temperament == " << do_equal_temperament << endl
        << "do_werckmeister3 == " << do_werckmeister3 << endl;

cerr << "XXX Enter <RETURN> to continue: ";
getchar(); 

   int status = equal_temperament(static_cast<float>(atof(argv[1])));

cerr << "XXX Enter <RETURN> to continue: ";
getchar(); 

   mysql_close(mysql);
   mysql_library_end();
 
   printf("Exiting `main' successfully with return value 0.\n");
   
   return 0;

} /* End of |main| definition.  */


@q * (1) @>
@
@<GCC command line option processing@>=
{
  int option_ctr;
  int digit_optind = 0;
 
@q *** (3) Index constants.@>
@*2 Index constants.

@<GCC command line option processing@>=

  const unsigned short PYTHAGOREAN_INDEX               =  0;
  const unsigned short EQUAL_TEMPERAMENT_INDEX         =  1;
  const unsigned short WERCKMEISTER_3_INDEX            =  2;

@q *** Option struct.@>
@ Option struct.

\LOG
\initials{LDF 2004.09.30.}
Added the ``\.{--quiet}'' option.
\ENDLOG 

@<GCC command line option processing@>=

  static struct option long_options[] = {
    {"pythagorean", 0, 0, 0},
    {"equal-temperament", 0, 0, 0},
    {"werckmeister3", 0, 0, 0},
    {0, 0, 0, 0}
  };
  
  int option_index = 0;
  int this_option_optind = optind ? optind : 1;  

@q *** (3) Loop for handling options.@>
@*2 Loop for handling options.

@<GCC command line option processing@>=

  while (1) {

    option_ctr = getopt_long_only(argc, argv, "",
                          long_options, &option_index);
#if 1 
    if (DEBUG)
      {
        cerr << "option_ctr == " << option_ctr << endl;
        cerr << "option_index == " << option_index << endl;
        if (optarg)
          cerr << "optarg == " << optarg << endl;
      }
#endif     

    if (option_ctr == -1)
      {
        if (DEBUG)
          cerr << "No more option arguments." << endl << endl ;
        break;
      }

    if (option_ctr == 0)
    {
        if (DEBUG)
          {
            cerr << "option " << long_options[option_index].name;
            if (optarg)
              cerr << " with arg " << optarg;
            cerr << endl;
          }

@q **** (4) pythagorean.@>
@ pythagorean.

@<GCC command line option processing@>=

        if (option_index == PYTHAGOREAN_INDEX)
        {
            cerr << "pythagorean." << endl;

            do_pythagorean = true;

        } /* |if (option_index == PYTHAGOREAN_INDEX)|  */


@q **** (4) equal-temperament.@>
@ equal-temperament.

@<GCC command line option processing@>=

        if (option_index == EQUAL_TEMPERAMENT_INDEX)
        {

           cerr << "equal_temperament." << endl;

           do_equal_temperament = true; 

        } /* |if (option_index == EQUAL_TEMPERAMENT_INDEX)|  */

@q **** (4) werckmeister3.@>
@ werckmeister3.

@<GCC command line option processing@>=

        if (option_index == WERCKMEISTER_3_INDEX)
        {
            cerr << "werckmeister3." << endl;

            do_werckmeister3 = true;

        } /* |if (option_index == WERCKMEISTER_3_INDEX)|  */

@q **** (4) Invalid option_index value.@>
@ Invalid {\tt option\_index} value.

@<GCC command line option processing@>=

        else 
        {
            cerr << "This can't happen! "
                 << "option_index has invalid value: "
                 << option_index << endl
                 << "Will try to continue." 
                 << endl << endl ;
        }

    }  /* |if (option_ctr == 0)|  */

@q **** (4) Ambiguous option.@>
@ Ambiguous option.

@<GCC command line option processing@>=

    else if (option_ctr == '?')
    {
        cerr << "`getopt_long_only' returned ambiguous match. Breaking."
             << endl << endl ;
        break;
    }

@q **** (4) Invalid option.@>
@ Invalid option.

@<GCC command line option processing@>=

    else
    {
        cerr << "getopt_long() returned invalid option."
             << endl ;
    }

@q **** (4) End of while loop.@>
@ End of while loop.

@<GCC command line option processing@>=

    if (DEBUG) 
      cerr << "*********************\n\n";
    } /* |while|  */


@q *** (3) Filename arguments.@>
@*2 Filename arguments.

@<GCC command line option processing@>=

cerr << "argc == " << argc << endl;
cerr << "optind == " << optind << endl;

  if (optind < argc)
  {
#if 1 
      if (DEBUG)
        cerr << "non-option ARGV-elements: ";
#endif 

      for (; optind < argc; ++optind)
      {
          if (DEBUG)
          {
             cerr << "argv[" << optind << "] == " << argv[optind] << endl ;
          }
      }

   } /* |if (optind < argc)| */

} /* End of group.  */


@q * (1) @>
@
@c
@<Include files@>@;
@<Global variables@>@;
@<|main| definition@>@;

@q * Emacs-Lisp code for use in indirect buffers when using the          @>
@q   GNU Emacs editor.  The local variable list is not evaluated when an @>
@q   indirect buffer is visited, so it's necessary to evaluate the       @>
@q   following s-expression in order to use the facilities normally      @>
@q   accessed via the local variables list.                              @>
@q   \initials{LDF 2004.02.12}.                                          @>
@q   (progn (cweb-mode) (outline-minor-mode t))                          @>

@q * Local variables for Emacs.@>
@q Local Variables: @>
@q mode:CWEB @>
@q eval:(display-time) @>
@q eval:(read-abbrev-file) @>
@q indent-tabs-mode:nil @>
@q eval:(outline-minor-mode) @>
@q fill-column:80 @>
@q End: @>

