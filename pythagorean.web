@q pythagorean.web @>
@q Created by Laurence D. Finston (LDF) Sun 17 Jul 2022 06:14:57 PM CEST @>

@q * (1) Copyright and License.@>

@q Copyright 2022 Laurence D. Finston @>

@q This file is part of Scale_Layouts, a package for generating scale layouts. @>

@q Scale_Layouts is free software; you can redistribute it and/or modify @>
@q it under the terms of the GNU General Public License as published by @>
@q the Free Software Foundation; either version 3 of the License, or @>
@q (at your option) any later version.  @>

@q Scale_Layouts is distributed in the hope that it will be useful, @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the @>
@q GNU General Public License for more details.  @>

@q You should have received a copy of the GNU General Public License @>
@q along with GNU 3DLDF; if not, write to the Free Software @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA@>

@q ("@@" stands for a single at-sign in the following paragraph.) @>

@q Please send bug reports to Laurence.Finston@@gmx.de@>

@q The author can be contacted at: @>

@q Laurence D. Finston                 @>
@q Laurence.Finston@@gmx.de (@@ stands for a single "at" sign.)@>


@q * (1) @>
@
@<Include files@>=
#include <stdlib.h>
#include <cstdio>
#include <float.h>
#include <iomanip>
#include <ios>
#include <iostream>
#include <iterator>
#include <math.h>
#include <new>
#include <sstream>
#include <vector>
#include <string>
#include <limits.h>
#include <limits>
#include <cfloat>

using namespace std;

@
@<|main| definition@>=
int
main(int argc, char *argv[])
{
   printf("Entering `main'.\n");

   cerr << "argc == " << argc << endl;

   for (int i = 0; i < argc; ++i)
   {
      cerr << "argv[" << i << "] == " << argv[i] << endl;
   }

   cerr << endl;

   float unison = 0.0F;

   float fifth;
   float second;
   float sixth;
   float third;
   float maj_seventh;
   float aug_fourth;
   float perfect_fourth;
   float min_seventh;
   float min_third;
   float min_sixth;
   float min_second;
   float dim_fifth;
   float octave_prime;

   unison = static_cast<float>(atof(argv[1]));
   fifth = unison * 3.0F/2.0F;
   second = fifth * 3.0F/2.0F;
   sixth = second * 3.0F/2.0F;
   third = sixth * 3.0F/2.0F;
   maj_seventh = third * 3.0F/2.0F;
   aug_fourth = maj_seventh * 3.0F/2.0F;
   octave_prime = aug_fourth * 3.0F/2.0F;

   perfect_fourth = unison * 2.0F/3.0F;
   min_seventh    = perfect_fourth * 2.0F/3.0F;
   min_third      = min_seventh * 2.0F/3.0F;
   min_sixth      = min_third * 2.0F/3.0F;
   min_second     = min_sixth * 2.0F/3.0F;
   dim_fifth      = min_second * 2.0F/3.0F;

   cerr << "Before rectification:" << endl
        << "dim_fifth           == " << dim_fifth << endl
        << "min_second          == " << min_second << endl
        << "min_sixth           == " << min_sixth << endl
        << "min_third           == " << min_third << endl
        << "min_seventh         == " << min_seventh << endl
        << "perfect_fourth      == " << perfect_fourth << endl
        << endl
        << "unison              == " << unison << endl
        << endl
        << "fifth               == " << fifth << endl
        << "second              == " << second << endl
        << "sixth               == " << sixth << endl
        << "third               == " << third << endl
        << "maj_seventh         == " << maj_seventh << endl
        << "aug_fourth          == " << aug_fourth << endl
        << "octave_prime        == " << octave_prime << endl
        << endl;        

   float limit = 2*unison;

   while (fifth > limit)
     fifth /= 2.0F;

   while (second > limit)
      second /= 2.0F;
                  
   while (sixth > limit)
      sixth /= 2.0F;
                    
   while (third > limit)
      third /= 2.0F;
                    
   while (maj_seventh > limit)
      maj_seventh /= 2.0F;
        
   while (aug_fourth > limit)
      aug_fourth /= 2.0F;

   while (octave_prime > limit + limit/10.0F)
      octave_prime /= 2.0F;

   while (perfect_fourth < unison)
      perfect_fourth *= 2.0F;
  
   while (min_seventh < unison)
      min_seventh *= 2.0F;
        
   while (min_third < unison)
      min_third *= 2.0F;
            
   while (min_sixth < unison)
      min_sixth *= 2.0F;
            
   while (min_second < unison)
      min_second *= 2.0F;
          
   while (dim_fifth < unison)
      dim_fifth *= 2.0F;



   cerr << "After rectification:" << endl
        << "unison              == " << unison << endl
        << "min_second          == " << min_second << endl
        << "second              == " << second << endl
        << "min_third           == " << min_third << endl
        << "third               == " << third << endl
        << "perfect_fourth      == " << perfect_fourth << endl
        << "aug_fourth          == " << aug_fourth << endl
        << "dim_fifth           == " << dim_fifth << endl
        << "fifth               == " << fifth << endl
        << "min_sixth           == " << min_sixth << endl
        << "sixth               == " << sixth << endl
        << "min_seventh         == " << min_seventh << endl
        << "maj_seventh         == " << maj_seventh << endl
        << "octave_prime        == " << octave_prime << endl
        << endl;

   printf("Exiting `main' successfully with return value 0.\n");

   
   return 0;

} /* End of |main| definition.  */

@
@c
@<Include files@>@;
@<|main| definition@>@;

@q * Emacs-Lisp code for use in indirect buffers when using the          @>
@q   GNU Emacs editor.  The local variable list is not evaluated when an @>
@q   indirect buffer is visited, so it's necessary to evaluate the       @>
@q   following s-expression in order to use the facilities normally      @>
@q   accessed via the local variables list.                              @>
@q   \initials{LDF 2004.02.12}.                                          @>
@q   (progn (cweb-mode) (outline-minor-mode t))                          @>

@q * Local variables for Emacs.@>
@q Local Variables: @>
@q mode:CWEB @>
@q eval:(display-time) @>
@q eval:(read-abbrev-file) @>
@q indent-tabs-mode:nil @>
@q eval:(outline-minor-mode) @>
@q fill-column:80 @>
@q End: @>

