@q werckmeister3.web @>
@q Created by Laurence D. Finston (LDF) Tue 19 Jul 2022 12:36:59 AM CEST @>

@q * (1) Copyright and License.@>

@q Copyright 2022 Laurence D. Finston @>

@q This file is part of Scale_Layouts, a package for generating scale layouts. @>

@q Scale_Layouts is free software; you can redistribute it and/or modify @>
@q it under the terms of the GNU General Public License as published by @>
@q the Free Software Foundation; either version 3 of the License, or @>
@q (at your option) any later version.  @>

@q Scale_Layouts is distributed in the hope that it will be useful, @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the @>
@q GNU General Public License for more details.  @>

@q You should have received a copy of the GNU General Public License @>
@q along with GNU 3DLDF; if not, write to the Free Software @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA@>

@q ("@@" stands for a single at-sign in the following paragraph.) @>

@q Please send bug reports to Laurence.Finston@@gmx.de@>

@q The author can be contacted at: @>

@q Laurence D. Finston                 @>
@q Laurence.Finston@@gmx.de (@@ stands for a single "at" sign.)@>


@q * (1) @>
@
@<Include files@>=
#include <stdlib.h>
#include <cstdio>
#include <float.h>
#include <iomanip>
#include <ios>
#include <iostream>
#include <iterator>
#include <math.h>
#include <new>
#include <sstream>
#include <vector>
#include <string>
#include <limits.h>
#include <limits>
#include <cfloat>

using namespace std;

@q * (1) werckmeister3.  @>

@ Werckmeister III (|werckmeister3|).
\initials{LDF 2022.07.20.}

\LOG
\initials{LDF 2022.07.20.}
Added this function.
\ENDLOG 

@q ** (2) Declaration  @>

@<|werckmeister3| declaration@>=
int
werckmeister3(float scale_length, int fret_ctr = 12);

@q *** (3) Definition @>
@
@<|werckmeister3| definition@>=
int
werckmeister3(float scale_length, int fret_ctr)
{
@q **** (4) @>

    printf("Entering `werckmeister3'.\n");

    float unit_size = 0.0F;

    /* uunit_size is a value found by generating a scale and then dividing
       in order to get it to fit into the desired scale length.
       \initials{LDF 2022.07.20.}  */
    
    unit_size := scale_length / (2 * 8.4430);

    bool do_labels;

    do_labels = false; /* |true|  */
    
    if (fret_ctr > 12)
    {
       cerr << "WARNING!  `fret_ctr' == " << fret_ctr << " (> 12):" << endl
            << "This is currently not permitted." << endl 
            << " Resetting `fret_ctr' to 12 and continuing." << endl
            << "Enter <RETURN> to continue: ";
       getchar(); 

       fret_ctr = 12;
    }
      
    cerr << "scale_length == " << scale_length << endl;
    cerr << "unit_size    == " << unit_size << endl;

    float a[12];

    a[0]  = 1;
    a[1]  = 256/243;
    a[2]  = (64/81);
    a[2]  *= (sqrt 2);
    a[3]  = 32/27;
    a[4]  = 256/243;
    a[4]  *= 2 root 4;
    a[5]  = 4/3;
    a[6]  = 1024/729;

    a[7]  = 8 root 4; %% 8 == 2 pow 3;
    a[7]  *= 8/9;

    a[8] = 128/81;

    a[9] = 1024/729;
    a[9] *= 2 root 4;

    a[10] = 16/9;

    a[11] = 2 root 4;
    a[11] *= 128/81;

    a[12] = 2;

    p0 = origin;

    if do_labels:
      dotlabel.lft("$p_0$", p0);
    fi

    label.top("Nut", p0) shifted (0, .25cm);
    draw (p0 shifted (-.25cm, 0)) -- (p0 shifted (.25cm, 0));
    label.lft("\setbox0=\hbox{\quad 0}Unison\hbox to \wd0{\hss}", p0) shifted (-.25cm, 0);
    
    
    q0 += --;
    q0 += p0;

    a_inverse0 = 1;

    numeric shift_val;
    shift_val = .25cm;
    
    for i = 1 upto 12:
      message "a" & decimal i & " = " & decimal a[i];
      a_inverse[i] = 1/a[i];
      message "a_inverse" & decimal i & " = " & decimal a_inverse[i];
      p[i] = p[i-1] shifted (0, -unit_size * a_inverse[i]);
      q0 += p[i];
      if do_labels:
	dotlabel.lft("$p_{" & decimal i & "}$", p[i]);
      fi
    endfor;



   float fifth;
   float second;
   float sixth;
   float third;
   float maj_seventh;
   float aug_fourth;
   float perfect_fourth;
   float min_seventh;
   float min_third;
   float min_sixth;
   float min_second;
   float dim_fifth;
   float octave_prime;



   cerr << "unison              == " << unison << endl
        << "min_second          == " << min_second << endl
        << "second              == " << second << endl
        << "min_third           == " << min_third << endl
        << "third               == " << third << endl
        << "perfect_fourth      == " << perfect_fourth << endl
        << "dim_fifth           == " << dim_fifth << endl
        << "aug_fourth          == " << aug_fourth << endl
        << "fifth               == " << fifth << endl
        << "min_sixth           == " << min_sixth << endl
        << "sixth               == " << sixth << endl
        << "min_seventh         == " << min_seventh << endl
        << "maj_seventh         == " << maj_seventh << endl
        // << "octave_prime        == " << octave_prime << endl
        << endl;

@q **** (4) @>

   printf("Exiting `werckmeister3' successfully with return value 0.\n");

   return 0;

} /* End of |werckmeister3| definition.  */

@q *** (3) @>

@q ** (2) @>

@q * (1) Putting Werckmeister III together.  @>

@ Putting Werckmeister III together.  
\initials{LDF 2022.07.20.}

@q ** (2) @>

This is what's compiled.

@c
@<Include files@>@;
@<|werckmeister3| definition@>@;

@q ** (2) @>

@ This is what's written to the header file \.{werckmeister3.hxx}.
\initials{LDF 2022.07.20.}

@(werckmeister3.hxx@>=
@<|werckmeister3| declaration@>@;

@q * (1) @>

@q * Emacs-Lisp code for use in indirect buffers when using the          @>
@q   GNU Emacs editor.  The local variable list is not evaluated when an @>
@q   indirect buffer is visited, so it's necessary to evaluate the       @>
@q   following s-expression in order to use the facilities normally      @>
@q   accessed via the local variables list.                              @>
@q   \initials{LDF 2004.02.12}.                                          @>
@q   (progn (cweb-mode) (outline-minor-mode t))                          @>

@q * Local variables for Emacs.@>
@q Local Variables: @>
@q mode:CWEB @>
@q eval:(display-time) @>
@q eval:(read-abbrev-file) @>
@q indent-tabs-mode:nil @>
@q eval:(outline-minor-mode) @>
@q fill-column:80 @>
@q End: @>

